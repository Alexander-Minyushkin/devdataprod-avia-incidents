training
names(training)
grep("^IL", names(training))
c(1, grep("^IL", names(training)))
t_training <- training[,c(1, grep("^IL", names(training)))]
names(t_training)
t_testing <- testing[,c(1, grep("^IL", names(training)))]
non_pca <- train(diagnosis ~. , data = t_training, method="glm")
library(caret)
non_pca <- train(diagnosis ~. , data = t_training, method="glm")
install.packages("e1071")
non_pca <- train(diagnosis ~. , data = t_training, method="glm")
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
t_training <- training[,c(1, grep("^IL", names(training)))]
t_testing <- testing[,c(1, grep("^IL", names(training)))]
non_pca <- train(diagnosis ~. , data = t_training, method="glm")
non_pca
install.packages("shinyapps")
install.packages("devtools")
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='alexander', token='0F53A8EB83CC15E1D909CF5FC668C8E4', secret='+bTP/ZSy360GAteWp1c5DkKLRr4beNv6GdemW0f/')
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
install.packages("rCharts")
1-0.1*0.1
1 - 0.05^2
0.05^2*365*24
0.9995*365*24
(1- 0.9995)*365*24
setwd("D:/Coursera/devdataprod-004/avia_project")
library("XML")
d <- xmlParse("AviationData.xml")
els <- getNodeSet(d, "//x:ROW", "x")
head(els)
attrs <- sapply(els, function(x) xmlAttrs(x))
out <- data.frame(t(attrs))
head(out)
class(out$ReportStatus)
class(out$PublicationDate)
head(as.character(out$PublicationDate))
head( strptime(as.character(out$PublicationDate), "%m/%d/%Y" )
)
out$EventDate <- strptime(as.character(out$EventDate), "%m/%d/%Y" )
out$PublicationDate <- strptime(as.character(out$PublicationDate), "%m/%d/%Y" )
head(out$PublicationDate - out$EventDate)
timediff
?time
?strptime
difftime
out$investigationTime <- difftime(out$PublicationDate - out$EventDate, "days")
?POSIXct
out <- data.frame(t(attrs))
out$EventDate <- as.POSIXct(as.character(out$EventDate), "%m/%d/%Y" )
out$PublicationDate <- as.POSIXct(as.character(out$PublicationDate), "%m/%d/%Y" )
out$investigationTime <- difftime(out$PublicationDate - out$EventDate, "days")
out <- data.frame(t(attrs))
as.POSIXct(as.character(out$EventDate), "%m/%d/%Y" )
head(out$EventDate)
head(as.character(out$EventDate))
head(as.character(out$EventDate),20)
?as.POSIXct
as.POSIXlt(as.character(out$EventDate), "%m/%d/%Y" )
warnings()
head(as.POSIXct(as.character(out$EventDate), tz = "", "%m/%d/%Y" ))
out$EventDate <- as.POSIXct(as.character(out$EventDate), tz = "", "%m/%d/%Y" )
out$PublicationDate <- as.POSIXct(as.character(out$PublicationDate), tz = "", "%m/%d/%Y" )
head(difftime(out$PublicationDate - out$EventDate, "days"))
class(out$EventDate)
class(out$PublicationDate)
head(out$PublicationDate - out$EventDate)
head(out$PublicationDate - out$EventDate) / 24/3600
head(as.numeric(out$PublicationDate - out$EventDate)) / 24/3600
out$investigationTimeDays <- as.numeric(out$PublicationDate - out$EventDate) / 24/3600
hist(out$investigationTimeDays, rm.na = T)
?hist
hist(out$investigationTimeDays[!is.na(out$investigationTimeDays)])
length(out$investigationTimeDays[!is.na(out$investigationTimeDays)])
length(out$investigationTimeDays)
hist(log(out$investigationTimeDays[!is.na(out$investigationTimeDays)]))
hist(log(out$investigationTimeDays[!is.na(out$investigationTimeDays)]+1))
min(out$investigationTimeDays)
min(out$investigationTimeDays[!is.na(out$investigationTimeDays)])
max(out$investigationTimeDays[!is.na(out$investigationTimeDays)])
min(out$PublicationDate)
out <- out[ !is.na(out$PublicationDate) & !is.na(out$EventDate),]
min(out$investigationTimeDays)
out[ which( out$investigationTimeDays == min(out$investigationTimeDays)) , ]
converMixedDate <- function(x){
y <- as.POSIXct(x, tz = "", "%m/%d/%Y" )
if(is.na(y)){
y <- as.POSIXct(x, tz = "", "/%Y-%m-%d" )
}
y
}
out <- data.frame(t(attrs))
head(out)
head(out$EventDate)
head(as.character(out$EventDate))
head( sapply(as.character(out$EventDate), converMixedDate) )
converMixedDate(as.character(out$EventDate[1]))
class(converMixedDate(as.character(out$EventDate[1])))
converMixedDate(as.character(out$EventDate[1]))
lapply( head(as.character(out$EventDate)), converMixedDate)
sapply( head(as.character(out$EventDate)), converMixedDate)
x <- sapply( head(as.character(out$EventDate)), converMixedDate)
class(x)
dim(x)
length(x)
head((x)
)
names(x)
?lapply
vapply( head(as.character(out$EventDate)), converMixedDate)
outer(1:3, 1:5)
sapply( head(as.character(out$EventDate)), converMixedDate, simplify = "array"))
sapply( head(as.character(out$EventDate)), converMixedDate, simplify = "array")
converMixedDate <- function(x){
y <- as.POSIXct(x, tz = "", "%m/%d/%Y" )
if(is.na(y)){
y <- as.POSIXct(x, tz = "", "%Y-%m-%d" )
}
y
}
sapply( head(as.character(out$EventDate)), converMixedDate)
names(sapply( head(as.character(out$EventDate)), converMixedDate))
converMixedDate <- function(x){
y <- as.POSIXct(x, tz = "", "%m/%d/%Y" )
if(is.na(y)){
y <- as.POSIXct(x, tz = "", "%Y-%m-%d" )
}
as.character(y)
}
sapply( head(as.character(out$EventDate)), converMixedDate)
converMixedDate <- function(x){
y <- as.POSIXct(x, tz = "", "%m/%d/%Y" )
if(is.na(y)){
y <- as.POSIXct(x, tz = "", "%Y-%m-%d" )
}
y
}
out$ed <- sapply( as.character(out$EventDate), converMixedDate)
head(out$ed)
class(out)
head(as.POSIXct(out$ed))
converMixedDate <- function(x){
y <- as.POSIXct(x, tz = "", "%m/%d/%Y" )
y[is.na(y)] <- as.POSIXct(x[is.na(y)], tz = "", "%Y-%m-%d" )
y
}
head(converMixedDate(out$EventDate))
table(is.na(converMixedDate(out$EventDate)))
out$EventDate[is.na(converMixedDate(out$EventDate))]
class(out$EventDate)
out$EventDate[is.na(converMixedDate(out$EventDate))][1]
Sys.setlocale("LC_TIME", "us")
options(stringsAsFactors = FALSE)
d <- xmlParse("AviationData.xml")
els <- getNodeSet(d, "//x:ROW", "x")
attrs <- sapply(els, function(x) xmlAttrs(x))
out <- data.frame(t(attrs))
converMixedDate <- function(x){
y <- as.POSIXct(x, tz = "", "%m/%d/%Y" )
y[is.na(y)] <- as.POSIXct(x[is.na(y)], tz = "", "%Y-%m-%d" )
y
}
out$EventDate[is.na(converMixedDate(out$EventDate))]
which(is.na(converMixedDate(out$EventDate)))
out$EventDate[67612]
s.POSIXct("04/01/1984", tz = "", "%m/%d/%Y" )
as.POSIXct("04/01/1984", tz = "", "%m/%d/%Y" )
as.POSIXct("4/01/1984", tz = "", "%m/%d/%Y" )
as.POSIXct("04/01/1984", tz = "", "%m/%d/%Y" )
as.POSIXct("01/04/1984", tz = "", "%m/%d/%Y" )
as.POSIXct("04/04/1984", tz = "", "%m/%d/%Y" )
as.POSIXct("04/01/1984", tz = "", "%m/%d/%Y" )
as.POSIXct("04/02/1984", tz = "", "%m/%d/%Y" )
as.POSIXct("04/1/1984", tz = "", "%m/%d/%Y" )
as.POSIXct("04/01/1984", tz = "", "%m/%d/%Y" )
?as.POSIXct
converMixedDate <- function(x){
y <- strptime(x, tz = "", "%m/%d/%Y" )
y[is.na(y)] <- strptime(x[is.na(y)], tz = "", "%Y-%m-%d" )
y
}
as.POSIXct("04/01/1984", tz = "", "%m/%d/%Y" )
strptime("04/01/1984", tz = "", "%m/%d/%Y" )
converMixedDate <- function(x){
y <- strptime(x, tz = "", "%m/%d/%Y" )
y[is.na(y)] <- strptime(x[is.na(y)], tz = "", "%Y-%m-%d" )
y
}
names(out)
table(is.na(converMixedDate(out$EventDate)))
converMixedDate("04/02/1984")
out$EventDate[is.na(converMixedDate(out$EventDate))]
out$EventDate[is.na(converMixedDate(out$PublicationDate))]
table(is.na(converMixedDate(out$PublicationDate)))
out$EventDate <- converMixedDate(out$EventDate)
out$PublicationDate <- converMixedDate(out$PublicationDate)
out <- out[ !is.na(out$PublicationDate) & !is.na(out$EventDate),]
out$investigationTimeDays <- as.numeric(out$PublicationDate - out$EventDate) / 24/3600
out$investigationTimeDays <- as.numeric(out$PublicationDate - out$EventDate) / 24/3600
min(out$investigationTimeDays)
max(out$investigationTimeDays)
which(out$PublicationDate - out$EventDate < 0)
out <- data.frame(t(attrs))
converMixedDate <- function(x){
y <- strptime(x, tz = "", "%m/%d/%Y" )
y[is.na(y)] <- strptime(x[is.na(y)], tz = "", "%Y-%m-%d" )
y
}
out$E_Date <- converMixedDate(out$EventDate)
out$P_Date <- converMixedDate(out$PublicationDate)
# Still have a mess in dates. Just clean them up for now
out <- out[ !is.na(out$P_Date) & !is.na(out$E_Date),]
out$investigationTimeDays <- as.numeric(out$P_Date - out$E_Date) / 24/3600
which(out$investigationTimeDays<0)
out[out$investigationTimeDays<0,]
which(out$investigationTimeDays)>365
which(out$investigationTimeDays>365>
which(out$investigationTimeDays>365)
which(out$investigationTimeDays> 2*365)
which(out$investigationTimeDays> 10*365)
which(out$investigationTimeDays> 20*365)
which(out$investigationTimeDays> 20*365)
out[out$investigationTimeDays> 20*365[1],]
out[out$investigationTimeDays> 20*365,]
out[out$investigationTimeDays> 20*365,][1]
which(out$investigationTimeDays> 10*365)
which(out$investigationTimeDays> 10*365)[1]
out[18613,]
which(out$investigationTimeDays> 20*365)[1]
out[which(out$investigationTimeDays> 20*365)[1],]
out <- [out$investigationTimeDays<0,]
out <- out[out$investigationTimeDays<0,]
min(out$investigationTimeDays)
out <- data.frame(t(attrs))
converMixedDate <- function(x){
y <- strptime(x, tz = "", "%m/%d/%Y" )
y[is.na(y)] <- strptime(x[is.na(y)], tz = "", "%Y-%m-%d" )
y
}
out$E_Date <- converMixedDate(out$EventDate)
out$P_Date <- converMixedDate(out$PublicationDate)
# Still have a mess in dates. Just clean them up for now
out <- out[ !is.na(out$P_Date) & !is.na(out$E_Date),]
out$investigationTimeDays <- as.numeric(out$P_Date - out$E_Date) / 24/3600
# cleanup Some more inconsystencies
out <- out[out$investigationTimeDays>0,]
hist(out$investigationTimeDays)
hist(log(out$investigationTimeDays))
mean(out$investigationTimeDays)
names(out)
class(out$TotalSeriousInjuries)
head(out$TotalSeriousInjuries)
head(out$ReportStatus)
table(as.factor(out$ReportStatus))
hist(as.numeric(out$TotalSeriousInjuries))
?hist
head(as.numeric(out$TotalFatalInjuries))
?as.numeric
out$ReportStatus <- as.factor(out$ReportStatus)
out$TotalFatalInjuries <- as.numeric(out$TotalFatalInjuries)
hist(out$TotalFatalInjuries[!is.na(out$TotalFatalInjuries)])
?hist
hist(log(out$TotalFatalInjuries[!is.na(out$TotalFatalInjuries)]))
log(10)
log10(10)
hist(log10(out$TotalFatalInjuries[!is.na(out$TotalFatalInjuries)]))
10^0.5
100000/8/3600
?save
getwd()
dir()
save(out, file = "out.RData")
dir()
levels(out$ReportStatus)
runApp()
library(shiny)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
table(out$ReportStatus == "Factual")
runApp()
?getMethod
?getS3method
?getClass
?showMethods
?dgamma
?lm
?predict
?colSums
install.packages("dplyr")
10^6/3600
install.packages("dplyr")
50000/8
50000/8/30
50000/8/30/60
getwd()
runApp()
runApp()
plot(x$investigationTimeDays, log="y", type='h', lwd=10, lend=2)
plot(out$investigationTimeDays, log="y", type='h', lwd=10, lend=2)
plot(out$investigationTimeDays, log="x", type='h', lwd=10, lend=2)
library("ggplot2")
ggplot(out, aes(x = investigationTimeDays)) + geom_histogram() + scale_x_log()
ggplot(out, aes(x = investigationTimeDays)) + geom_histogram()
ggplot(out, aes(x = investigationTimeDays)) + geom_histogram() + coord_trans(x="log10")
hist(log10(out$investigationTimeDays))
?hist
ggplot(out, aes(x = investigationTimeDays)) + geom_histogram() + scale_x_log10()
runApp()
binwidth = diff(range(out$investigationTimeDay))/30
binwidth
ggplot(out, aes(x = investigationTimeDays)) +
geom_histogram(binwidth = diff(range(out$investigationTimeDay))/30) +
scale_x_log10()
range(out$investigationTimeDay)
range(log10(out$investigationTimeDay))
ggplot(out, aes(x = investigationTimeDays)) +
geom_histogram(binwidth = diff(range(log10(out$investigationTimeDay)))/30) +
scale_x_log10()
runApp()
runApp()
out$ReportStatus
any(out$ReportStatus == "Factual")
runApp()
runApp()
quantile(out$investigationTimeDay, 0.95)
quantile(out$investigationTimeDay, 0.99)
quantile(out$investigationTimeDay, 0.95)
runApp()
runApp()
x<-out
q95 <- quantile(x$investigationTimeDay, 0.95)
q95 <- quantile(x$investigationTimeDay)
q95
ggplot(x, aes(x = investigationTimeDays)) +
geom_histogram(binwidth = diff(range(log10(out$investigationTimeDay)))/30) +
scale_x_log10() +
geom_vline(aes(xintercept="quantile"), colour="#BB0000", linetype="dashed")
ggplot(x, aes(x = investigationTimeDays)) +
geom_histogram(binwidth = diff(range(log10(out$investigationTimeDay)))/30) +
scale_x_log10() +
geom_vline(aes(xintercept=quantile(x$investigationTimeDay, 0.95)), colour="#BB0000", linetype="dashed")
ggplot(x, aes(x = investigationTimeDays)) +
geom_histogram(binwidth = diff(range(log10(out$investigationTimeDay)))/30) +
scale_x_log10() +
geom_vline(aes(xintercept=quantile(investigationTimeDay, 0.95)), colour="#BB0000", linetype="dashed")
ggplot(x, aes(x = investigationTimeDays)) +
geom_histogram(binwidth = diff(range(log10(out$investigationTimeDay)))/30) +
scale_x_log10() +
geom_vline(aes(xintercept=quantile(x$investigationTimeDay, 0.95)), colour="#BB0000", linetype="dashed")
quantile(x$investigationTimeDay, 0.95)
class(quantile(x$investigationTimeDay, 0.95))
quantile(x$investigationTimeDay, 0.95)[1]
names(quantile(x$investigationTimeDay, 0.95))
as.numeric(quantile(x$investigationTimeDay, 0.95))
ggplot(x, aes(x = investigationTimeDays)) +
geom_histogram(binwidth = diff(range(log10(out$investigationTimeDay)))/30) +
scale_x_log10() +
geom_vline(aes(xintercept = as.numeric(quantile(x$investigationTimeDay, 0.95))),
colour="#BB0000", linetype="dashed")
dir()
readLines("links.txt")
names(out)
q95
q95 <- quantile(x$investigationTimeDay, 0.95)
q95
round(q95)
as.numeric(round(q95))
ggplot(x, aes(x = investigationTimeDays)) +
geom_histogram(binwidth = diff(range(log10(out$investigationTimeDay)))/30) +
scale_x_log10() +
geom_vline(aes(xintercept = as.numeric(quantile(x$investigationTimeDay, 0.95))),
colour="#BB0000", linetype="dashed") +
ggtitle(paste0( "Distribution of time (in days) between incident and report publication.\n95% percentile = ", as.numeric(round(q95)))
)
ggplot(x, aes(x = investigationTimeDays)) +
geom_histogram(binwidth = diff(range(log10(out$investigationTimeDay)))/30) +
scale_x_log10() +
geom_vline(aes(xintercept = as.numeric(quantile(x$investigationTimeDay, 0.95))),
colour="#BB0000", linetype="dashed") +
ggtitle(paste0( "Distribution of time (in days) between incident and report publication.\n95% percentile = ",
as.numeric(round(q95)),
"\nReport type = ", as.character(input$varReportStatus)
)
)
runApp()
names(out)
hist(out$TotalFatalInjuries)
hist(log10(out$TotalFatalInjuries))
table(out$TotalFatalInjuries>100)
table(out$TotalFatalInjuries>10)
table(out$TotalFatalInjuries>1)
table(out$TotalFatalInjuries>0)
table(out$TotalFatalInjuries>=0)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
table(out[out$TotalFatalInjuries > 1,]$ReportStatus)
runApp()
head(out)
head(out$TotalFatalInjuries > 0)
head(out$TotalFatalInjuries)
runApp()
?h4
?a
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
ggplot(x, aes(x = investigationTimeDays)) +
geom_histogram(binwidth = diff(range(log10(out$investigationTimeDay)))/30) +
scale_x_log10() +
geom_vline(aes(xintercept = as.numeric(quantile(investigationTimeDay, 0.95))),
colour="#BB0000", linetype="dashed") +
ggtitle(paste0( "Distribution of time (in days) between incident and report publication.\nReport type = ",
as.character(input$varReportStatus),
"\n95% percentile = ", as.numeric(round(q95))
)
)
q95 <- quantile(x$investigationTimeDay, 0.95)
ggplot(x, aes(x = investigationTimeDays)) +
geom_histogram(binwidth = diff(range(log10(out$investigationTimeDay)))/30) +
scale_x_log10() +
geom_vline(aes(xintercept = as.numeric(quantile(investigationTimeDay, 0.95))),
colour="#BB0000", linetype="dashed") +
ggtitle(paste0( "Distribution of time (in days) between incident and report publication.\nReport type = ",
as.character(input$varReportStatus),
"\n95% percentile = ", as.numeric(round(q95))
)
)
ggplot(x, aes(x = investigationTimeDays)) +
geom_histogram(binwidth = diff(range(log10(out$investigationTimeDay)))/30) +
scale_x_log10() +
geom_vline(aes(xintercept = as.numeric(quantile(investigationTimeDay, 0.95))),
colour="#BB0000", linetype="dashed")
ggplot(x, aes(x = investigationTimeDays)) +
geom_histogram(binwidth = diff(range(log10(out$investigationTimeDay)))/30) +
scale_x_log10() +
geom_vline(aes(xintercept = as.numeric(quantile(x$investigationTimeDay, 0.95))),
colour="#BB0000", linetype="dashed")
quantile(x$investigationTimeDay, 0.95)
dim(x)
x<-x[!is.na(x$TotalFatalInjuries),]
dim(x)
quantile(x$investigationTimeDay, 0.95)
x<-out[out$ReportStatus == "Factual",]
dim(x)
quantile(x$investigationTimeDay, 0.95)
ggplot(x, aes(x = investigationTimeDays)) +
geom_histogram(binwidth = diff(range(log10(out$investigationTimeDay)))/30) +
scale_x_log10() +
geom_vline(aes(xintercept = as.numeric(quantile(x$investigationTimeDay, 0.95))),
colour="#BB0000", linetype="dashed")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
q95
q95$95%
q95$"95%"
q95["95%"]
q95 <- quantile(x$investigationTimeDay, 0.95)
names(q95) <- "percentile"
q95
ggplot(x, aes(x = investigationTimeDays)) +
geom_histogram(binwidth = diff(range(log10(out$investigationTimeDay)))/30) +
scale_x_log10() +
geom_vline(aes(xintercept = percentile), data = q95,
colour="#BB0000", linetype="dashed")
data.frame( percentile = quantile(x$investigationTimeDay, 0.95))
q95 <- data.frame( percentile = quantile(x$investigationTimeDay, 0.95))
ggplot(x, aes(x = investigationTimeDays)) +
geom_histogram(binwidth = diff(range(log10(out$investigationTimeDay)))/30) +
scale_x_log10() +
geom_vline(aes(xintercept = percentile), data = q95,
colour="#BB0000", linetype="dashed")
runApp()
library(shinyapps)
?deployApp
getwd()
deployApp()
